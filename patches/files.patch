diff --recursive -w -u orig-modules/aitc/modules/client.js modules/aitc/modules/client.js
--- orig-modules/aitc/modules/client.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/aitc/modules/client.js	2012-05-07 10:39:38.000000000 -0500
@@ -120,7 +120,8 @@
 
         // Convert apps from remote to local format
         var apps = [];
-        for each (var app in tmp) {
+        for (var i = 0; i < tmp.length; i++) {
+          var app = tmp[i];
           apps.push(self._makeLocalApp(app));
         }
 
@@ -128,7 +129,7 @@
         cb(null, apps);
 
         // Don't update lastModified until we know cb succeeded.
-        self._appsLastModified = parseInt(req.response.headers['x-timestamp']);
+        self._appsLastModified = parseInt(req.response.headers['x-timestamp'], 10);
       } catch (e) {
         self._log.error("Exception in getApps " + e);
       }
@@ -141,7 +142,8 @@
    * don't store them on the server.
    */
   _makeRemoteApp: function _makeRemoteApp(app) {
-    for each (var key in this.requiredLocalKeys) {
+    for (var i = 0; i < this.requiredLocalKeys.length; i++) {
+      var key = this.requiredLocalKeys[i];
       if (!app[key]) {
         throw new Error("Local app missing key " + key);
       }
@@ -167,7 +169,8 @@
    * registry expects. (Inverse of _makeRemoteApp)
    */
   _makeLocalApp: function _makeLocalApp(app) {
-    for each (var key in this._requiredRemoteKeys) {
+    for (var i = 0; i < this._requiredRemoteKeys; i++) {
+      var key = this._requiredRemoteKeys[i];
       if (!app[key]) {
         throw new Error("Remote app missing key " + key);
       }
@@ -271,8 +274,8 @@
     }
 
     var time = new Date().getTime();
-    var lastReq = parseInt(PREFS.get("lastReq", 0));
-    var backoff = parseInt(PREFS.get("backoff", 0));
+    var lastReq = parseInt(PREFS.get("lastReq", 0), 10);
+    var backoff = parseInt(PREFS.get("backoff", 0), 10);
 
     if (lastReq + (backoff * 1000) < time) {
       this._log.warn("X-Backoff is " + backoff + ", not making request");
diff --recursive -w -u orig-modules/aitc/modules/manager.js modules/aitc/modules/manager.js
--- orig-modules/aitc/modules/manager.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/aitc/modules/manager.js	2012-05-07 10:40:19.000000000 -0500
@@ -425,7 +425,7 @@
     }
 
     // Check if we can get assertion silently first
-    self._log.info("Attempting to obtain assertion silently")
+    self._log.info("Attempting to obtain assertion silently");
     BrowserID.getAssertion(gotSilentAssertion, {
       audience: this.DASHBOARD, sameEmailAs: this.MARKETPLACE
     });
diff --recursive -w -u orig-modules/aitc/modules/storage.js modules/aitc/modules/storage.js
--- orig-modules/aitc/modules/storage.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/aitc/modules/storage.js	2012-05-07 10:40:45.000000000 -0500
@@ -244,7 +244,8 @@
     var localApps = {};
     
     // Convert lApps to a dictionary of origin -> app (instead of id -> app).
-    for (var [id, app] in Iterator(localApps)) {
+    for (var id in localApps) {
+      var app = localApps[id];
       app.id = id;
       toDelete[app.origin] = app;
       localApps[app.origin] = app;
@@ -252,7 +253,8 @@
 
     // Iterate over remote apps, and find out what changes we must apply.
     var toInstall = [];
-    for each (var app in remoteApps) {
+    for (var i = 0; i < remoteApps.length; i++) {
+      var app = remoteApps[i];
       // Don't delete apps that are both local & remote.
       var origin = app.origin;
       delete toDelete[origin];
diff --recursive -w -u orig-modules/common/log4moz.js modules/common/log4moz.js
--- orig-modules/common/log4moz.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/common/log4moz.js	2012-05-07 10:28:19.000000000 -0500
@@ -93,28 +93,13 @@
   Appender: Appender,
   DumpAppender: DumpAppender,
   ConsoleAppender: ConsoleAppender,
-  BlockingStreamAppender: BlockingStreamAppender,
-  StorageStreamAppender: StorageStreamAppender,
-
-  // Discouraged due to blocking I/O.
-  FileAppender: FileAppender,
-  RotatingFileAppender: RotatingFileAppender,
 
   // Logging helper:
   // var logger = Log4Moz.repository.getLogger("foo");
   // logger.info(Log4Moz.enumerateInterfaces(someObject).join(","));
+  // HTML: not applicable, changed to do nothing
   enumerateInterfaces: function Log4Moz_enumerateInterfaces(aObject) {
-    var interfaces = [];
-
-    for (i in Ci) {
-      try {
-        aObject.QueryInterface(Ci[i]);
-        interfaces.push(i);
-      }
-      catch(ex) {}
-    }
-
-    return interfaces;
+    return [];
   },
 
   // Logging helper:
@@ -197,7 +182,7 @@
   },
 
   _parent: null,
-  get parent() this._parent,
+  get parent() {return this._parent;},
   set parent(parent) {
     if (this._parent == parent) {
       return;
@@ -428,212 +413,25 @@
   __proto__: Appender.prototype,
 
   doAppend: function CApp_doAppend(message) {
-    if (message.level > Log4Moz.Level.Warn) {
-      Cu.reportError(message);
+    if (! window.console) {
       return;
     }
-    Cc["@mozilla.org/consoleservice;1"].
-      getService(Ci.nsIConsoleService).logStringMessage(message);
-  }
-};
-
-/**
- * Base implementation for stream based appenders.
- *
- * Caution: This writes to the output stream synchronously, thus logging calls
- * block as the data is written to the stream. This can have negligible impact
- * for in-memory streams, but should be taken into account for I/O streams
- * (files, network, etc.)
- */
-function BlockingStreamAppender(formatter) {
-  this._name = "BlockingStreamAppender";
-  Appender.call(this, formatter);
-}
-BlockingStreamAppender.prototype = {
-  __proto__: Appender.prototype,
-
-  _converterStream: null, // holds the nsIConverterOutputStream
-  _outputStream: null,    // holds the underlying nsIOutputStream
-
-  /**
-   * Output stream to write to.
-   *
-   * This will automatically open the stream if it doesn't exist yet by
-   * calling newOutputStream. The resulting raw stream is wrapped in a
-   * nsIConverterOutputStream to ensure text is written as UTF-8.
-   */
-  get outputStream() {
-    if (!this._outputStream) {
-      // First create a raw stream. We can bail out early if that fails.
-      this._outputStream = this.newOutputStream();
-      if (!this._outputStream) {
-        return null;
-      }
-
-      // Wrap the raw stream in an nsIConverterOutputStream. We can reuse
-      // the instance if we already have one.
-      if (!this._converterStream) {
-        this._converterStream = Cc["@mozilla.org/intl/converter-output-stream;1"]
-                                  .createInstance(Ci.nsIConverterOutputStream);
-      }
-      this._converterStream.init(
-        this._outputStream, "UTF-8", STREAM_SEGMENT_SIZE,
-        Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);
-    }
-    return this._converterStream;
-  },
-
-  newOutputStream: function newOutputStream() {
-    throw "Stream-based appenders need to implement newOutputStream()!";
-  },
-
-  reset: function reset() {
-    if (!this._outputStream) {
+    if (console.error && message.level >= Log4Moz.Level.Error) {
+      console.error(message);
       return;
     }
-    this.outputStream.close();
-    this._outputStream = null;
-  },
-
-  doAppend: function doAppend(message) {
-    if (!message) {
+    if (console.warn && message.level >= Log4Moz.Level.Warn) {
+      console.warn(message);
       return;
     }
-    try {
-      this.outputStream.writeString(message);
-    } catch(ex) {
-      if (ex.result == Cr.NS_BASE_STREAM_CLOSED) {
-        // The underlying output stream is closed, so let's open a new one
-        // and try again.
-        this._outputStream = null;
-        try {
-          this.outputStream.writeString(message);
-        } catch (ex) {
-          // Ah well, we tried, but something seems to be hosed permanently.
-        }
-      }
-    }
-  }
-};
-
-/**
- * Append to an nsIStorageStream
- *
- * This writes logging output to an in-memory stream which can later be read
- * back as an nsIInputStream. It can be used to avoid expensive I/O operations
- * during logging. Instead, one can periodically consume the input stream and
- * e.g. write it to disk asynchronously.
- */
-function StorageStreamAppender(formatter) {
-  this._name = "StorageStreamAppender";
-  BlockingStreamAppender.call(this, formatter);
-}
-StorageStreamAppender.prototype = {
-  __proto__: BlockingStreamAppender.prototype,
-
-  _ss: null,
-  newOutputStream: function newOutputStream() {
-    var ss = this._ss = Cc["@mozilla.org/storagestream;1"]
-                          .createInstance(Ci.nsIStorageStream);
-    ss.init(STREAM_SEGMENT_SIZE, PR_UINT32_MAX, null);
-    return ss.getOutputStream(0);
-  },
-
-  getInputStream: function getInputStream() {
-    if (!this._ss) {
-      return null;
-    }
-    return this._ss.newInputStream(0);
-  },
-
-  reset: function reset() {
-    BlockingStreamAppender.prototype.reset.call(this);
-    this._ss = null;
-  }
-};
-
-/**
- * File appender (discouraged)
- *
- * Writes otuput to a file using a regular nsIFileOutputStream (as opposed
- * to nsISafeFileOutputStream, since immediate durability is typically not
- * needed for logs.) Note that I/O operations block the logging caller.
- */
-function FileAppender(file, formatter) {
-  this._name = "FileAppender";
-  this._file = file; // nsIFile
-  BlockingStreamAppender.call(this, formatter);
-}
-FileAppender.prototype = {
-  __proto__: BlockingStreamAppender.prototype,
-
-  newOutputStream: function newOutputStream() {
-    try {
-      return FileUtils.openFileOutputStream(this._file);
-    } catch(e) {
-      return null;
-    }
-  },
-
-  reset: function reset() {
-    BlockingStreamAppender.prototype.reset.call(this);
-    try {
-      this._file.remove(false);
-    } catch (e) {
-      // File didn't exist in the first place, or we're on Windows. Meh.
-    }
-  }
-};
-
-/**
- * Rotating file appender (discouraged)
- *
- * Similar to FileAppender, but rotates logs when they become too large.
- */
-function RotatingFileAppender(file, formatter, maxSize, maxBackups) {
-  if (maxSize === undefined)
-    maxSize = ONE_MEGABYTE * 2;
-
-  if (maxBackups === undefined)
-    maxBackups = 0;
-
-  this._name = "RotatingFileAppender";
-  FileAppender.call(this, file, formatter);
-  this._maxSize = maxSize;
-  this._maxBackups = maxBackups;
-}
-RotatingFileAppender.prototype = {
-  __proto__: FileAppender.prototype,
-
-  doAppend: function doAppend(message) {
-    FileAppender.prototype.doAppend.call(this, message);
-    try {
-      this.rotateLogs();
-    } catch(e) {
-      dump("Error writing file:" + e + "\n");
-    }
-  },
-
-  rotateLogs: function rotateLogs() {
-    if (this._file.exists() && this._file.fileSize < this._maxSize) {
+    if (console.info && message.level >= Log4Moz.Level.Info) {
+      console.info(message);
       return;
     }
-
-    BlockingStreamAppender.prototype.reset.call(this);
-
-    for (var i = this.maxBackups - 1; i > 0; i--) {
-      var backup = this._file.parent.clone();
-      backup.append(this._file.leafName + "." + i);
-      if (backup.exists()) {
-        backup.moveTo(this._file.parent, this._file.leafName + "." + (i + 1));
-      }
-    }
-
-    var cur = this._file.clone();
-    if (cur.exists()) {
-      cur.moveTo(cur.parent, cur.leafName + ".1");
+    if (console.debug && message.level <= Log4Moz.Level.Debug) {
+      console.debug(message);
+      return;
     }
-
-    // Note: this._file still points to the same file
+    console.log(message);
   }
 };
diff --recursive -w -u orig-modules/common/observers.js modules/common/observers.js
--- orig-modules/common/observers.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/common/observers.js	2012-05-04 17:03:56.000000000 -0500
@@ -91,9 +91,9 @@
     // we can make it.  We could index by topic, but we can't index by callback
     // or thisObject, as far as I know, since the keys to JavaScript hashes
     // (a.k.a. objects) can apparently only be primitive values.
-    var [observer] = this._cache.filter(function(v) v.topic      == topic    &&
+    var observer = this._cache.filter(function(v) {return v.topic      == topic    &&
                                                     v.callback   == callback &&
-                                                    v.thisObject == thisObject);
+                                                    v.thisObject == thisObject;})[0];
     if (observer) {
       this._service.removeObserver(observer, topic);
       this._cache.splice(this._cache.indexOf(observer), 1);
@@ -146,7 +146,6 @@
 }
 
 Observer.prototype = {
-  QueryInterface: XPCOMUtils.generateQI([Ci.nsIObserver, Ci.nsISupportsWeakReference]),
   observe: function(subject, topic, data) {
     // Extract the wrapped object for subjects that are one of our wrappers
     // around a JS object.  This way we support both wrapped subjects created
@@ -177,7 +176,6 @@
 }
 
 Subject.prototype = {
-  QueryInterface: XPCOMUtils.generateQI([]),
   getHelperForLanguage: function() {},
   getInterfaces: function() {}
 };
diff --recursive -w -u orig-modules/common/preferences.js modules/common/preferences.js
--- orig-modules/common/preferences.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/common/preferences.js	2012-05-07 10:36:32.000000000 -0500
@@ -62,6 +62,8 @@
     }
     else if (args)
       this._prefBranch = args;
+    this._initPrefSvc();
+    this._initContentSvc();
 }
 
 Preferences.prototype = {
@@ -78,7 +80,7 @@
    */
   get: function(prefName, defaultValue) {
     if (Array.isArray(prefName))
-      return prefName.map(function(v) this.get(v, defaultValue), this);
+      return prefName.map(function(v) {return this.get(v, defaultValue);}, this);
 
     if (this._site)
       return this._siteGet(prefName, defaultValue);
@@ -137,8 +139,8 @@
    */
   set: function(prefName, prefValue) {
     if (isObject(prefName)) {
-      for (var [name, value] in Iterator(prefName))
-        this.set(name, value);
+      for (var name in prefName)
+        this.set(name, prefName[name]);
       return;
     }
 
@@ -156,10 +158,7 @@
     switch (prefType) {
       case "String":
         {
-          var string = Cc["@mozilla.org/supports-string;1"].
-                       createInstance(Ci.nsISupportsString);
-          string.data = prefValue;
-          this._prefSvc.setComplexValue(prefName, Ci.nsISupportsString, string);
+          this._prefSvc.setComplexValue(prefName, prefValue);
         }
         break;
 
@@ -258,7 +257,7 @@
 
   reset: function(prefName) {
     if (Array.isArray(prefName)) {
-      prefName.map(function(v) this.reset(v), this);
+      prefName.map(function(v) {return this.reset(v);}, this);
       return;
     }
 
@@ -390,9 +389,9 @@
     // make it.  We could index by fullBranch, but we can't index by callback
     // or thisObject, as far as I know, since the keys to JavaScript hashes
     // (a.k.a. objects) can apparently only be primitive values.
-    var [observer] = observers.filter(function(v) v.prefName   == fullPrefName &&
+    var observer = observers.filter(function(v) {return v.prefName   == fullPrefName &&
                                                   v.callback   == callback &&
-                                                  v.thisObject == thisObject);
+                                                  v.thisObject == thisObject;})[0];
 
     if (observer) {
       Preferences._prefSvc.removeObserver(fullPrefName, observer);
@@ -430,7 +429,7 @@
    * Preferences Service
    * @private
    */
-  get _prefSvc() {
+  _initPrefSvc: function () {
     var prefSvc = Cc["@mozilla.org/preferences-service;1"]
                   .getService(Ci.nsIPrefService);
     if (this._defaultBranch) {
@@ -439,8 +438,7 @@
       prefSvc = prefSvc.getBranch(this._prefBranch);
     }
 
-    this.__defineGetter__("_prefSvc", function() prefSvc);
-    return this._prefSvc;
+    return this._prefSvc = prefSvc;
   },
 
   /**
@@ -450,19 +448,17 @@
   get _ioSvc() {
     var ioSvc = Cc["@mozilla.org/network/io-service;1"].
                 getService(Ci.nsIIOService);
-    this.__defineGetter__("_ioSvc", function() ioSvc);
-    return this._ioSvc;
+    return ioSvc;
   },
 
   /**
    * Site Preferences Service
    * @private
    */
-  get _contentPrefSvc() {
+  _initContentPrefSvc: function _initContentPrefSvc() {
     var contentPrefSvc = Cc["@mozilla.org/content-pref/service;1"].
                          getService(Ci.nsIContentPrefService);
-    this.__defineGetter__("_contentPrefSvc", function() contentPrefSvc);
-    return this._contentPrefSvc;
+    this._contentPrefSvc = contentPrefSvc;
   }
 
 };
@@ -492,7 +488,6 @@
 }
 
 PrefObserver.prototype = {
-  QueryInterface: XPCOMUtils.generateQI([Ci.nsIObserver, Ci.nsISupportsWeakReference]),
 
   observe: function(subject, topic, data) {
     // The pref service only observes whole branches, but we only observe
diff --recursive -w -u orig-modules/common/rest.js modules/common/rest.js
--- orig-modules/common/rest.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/common/rest.js	2012-05-07 10:41:32.000000000 -0500
@@ -79,8 +79,8 @@
 
   // If we don't have an nsIURI object yet, make one. This will throw if
   // 'uri' isn't a valid URI string.
-  if (!(uri instanceof Ci.nsIURI)) {
-    uri = Services.io.newURI(uri, null, null);
+  if (!(uri instanceof ioSvc.nsIURI)) {
+    uri = ioSvc.newURI(uri, null, null);
   }
   this.uri = uri;
 
@@ -93,12 +93,6 @@
 
   _logName: "Services.Common.RESTRequest",
 
-  QueryInterface: XPCOMUtils.generateQI([
-    Ci.nsIBadCertListener2,
-    Ci.nsIInterfaceRequestor,
-    Ci.nsIChannelEventSink
-  ]),
-
   /*** Public API: ***/
 
   /**
@@ -119,7 +113,7 @@
   /**
    * nsIRequest load flags. Don't do any caching by default.
    */
-  loadFlags: Ci.nsIRequest.LOAD_BYPASS_CACHE | Ci.nsIRequest.INHIBIT_CACHING,
+  //loadFlags: Ci.nsIRequest.LOAD_BYPASS_CACHE | Ci.nsIRequest.INHIBIT_CACHING,
 
   /**
    * nsIHttpChannel
@@ -231,7 +225,7 @@
    *
    * @return the request object.
    */
-  delete: function delete_(onComplete, onProgress) {
+  "delete": function delete_(onComplete, onProgress) {
     return this.dispatch("DELETE", null, onComplete, onProgress);
   },
 
@@ -336,7 +330,7 @@
                                      Cr.NS_ERROR_NET_TIMEOUT);
     if (!this.onComplete) {
       this._log.error("Unexpected error: onComplete not defined in " +
-                      "abortTimeout.")
+                      "abortTimeout.");
       return;
     }
     this.onComplete(error);
diff --recursive -w -u orig-modules/common/utils.js modules/common/utils.js
--- orig-modules/common/utils.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/common/utils.js	2012-05-07 10:41:46.000000000 -0500
@@ -149,7 +149,11 @@
   },
 
   byteArrayToString: function byteArrayToString(bytes) {
-    return [String.fromCharCode(byte) for each (byte in bytes)].join("");
+    var result = [];
+    for (var i = 0; i < bytes.length; i++) {
+      result.push(String.fromCharCode(bytes[i]));
+    }
+    return result.join("");
   },
 
   bytesAsHex: function bytesAsHex(bytes) {
@@ -179,7 +183,10 @@
     // is turned into 8 characters from the 32 character base.
     var ret = "";
     for (var i = 0; i < bytes.length; i += 5) {
-      var c = [byte.charCodeAt() for each (byte in bytes.slice(i, i + 5))];
+      var c = [];
+      for (var j = i; j < i + 5; j++) {
+        c.push(bytes.charCodeAt(i));
+      }
       ret += key[c[0] >> 3]
            + key[((c[0] << 2) & 0x1f) | (c[1] >> 6)]
            + key[(c[1] >> 1) & 0x1f]
@@ -237,8 +244,9 @@
       }
 
       // Handle a left shift, restricted to bytes.
-      function left(octet, shift)
-        (octet << shift) & 0xff;
+      function left(octet, shift) {
+        return (octet << shift) & 0xff;
+      }
 
       advance();
       accumulate(left(val, 3));
Only in modules: compat.js
diff --recursive -w -u orig-modules/crypto/modules/utils.js modules/crypto/modules/utils.js
--- orig-modules/crypto/modules/utils.js	2012-05-07 10:42:39.000000000 -0500
+++ modules/crypto/modules/utils.js	2012-05-07 10:42:01.000000000 -0500
@@ -42,7 +42,10 @@
    */
   digestBytes: function digestBytes(message, hasher) {
     // No UTF-8 encoding for you, sunshine.
-    var bytes = [b.charCodeAt() for each (b in message)];
+    var bytes = [];
+    for (var i = 0; i < message.length; i++) {
+      bytes.push(message.charCodeAt(i));
+    }
     hasher.update(bytes, bytes.length);
     var result = hasher.finish(false);
     if (hasher instanceof Ci.nsICryptoHMAC) {
Only in modules/crypto/modules: utils.js.orig
Only in modules/crypto/modules: utils.js.rej
Only in modules: eventmixin.js
Only in modules: typed-storage.js
